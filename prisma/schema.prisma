generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  clerkId   String         @unique
  email     String         @unique
  entries   JournalEntry[]
  analysis  Analysis[]
}

model JournalEntry {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String    @db.Text
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  analysis  Analysis?

  @@unique([userId, id])
}

model Analysis {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  entryId        String
  entry          JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  mood           String
  emoji          String
  summary        String       @db.Text
  color          String
  negative       Boolean
  subject        String
  textColor      String
  sentimentScore Float        @default(0)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([entryId])
  @@index([userId])
}

// The above userId is a foreign key that points to some other property in another relation

// @db.Text means the string length can be as long as possible 

// ? means field cannot be empty

// edge functions that will perform the SQL queries without having to write SQL.
